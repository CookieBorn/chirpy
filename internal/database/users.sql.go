// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type CreateUserParams struct {
	Email    string
	Password string
}

type CreateUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	IsChirpyRed bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT id, created_at, updated_at, email, password, is_chirpy_red from users
where email=$1
`

func (q *Queries) GetUserEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserEmailFromID = `-- name: GetUserEmailFromID :one
SELECT email from users
where id=$1
`

func (q *Queries) GetUserEmailFromID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserEmailFromID, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const reset = `-- name: Reset :exec
DELETE from users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const setUserToRed = `-- name: SetUserToRed :exec
UPDATE users
set is_chirpy_red = true
Where id=$1
`

func (q *Queries) SetUserToRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setUserToRed, id)
	return err
}

const updateUserEmailPassword = `-- name: UpdateUserEmailPassword :exec
UPDATE users
set email = $1, updated_at = NOW(), password = $2
Where id=$3
`

type UpdateUserEmailPasswordParams struct {
	Email    string
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdateUserEmailPassword(ctx context.Context, arg UpdateUserEmailPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmailPassword, arg.Email, arg.Password, arg.ID)
	return err
}
